@page "/securestorage"
@inject ISecureStorageService SecureStorageService

<h3>Secure Storage</h3>

<div>
  <label for="userIdForInput" class="form-label">UserID</label>
  <input type="text" name="userIdForInput" class="form-control" @bind-value="@userIdForInput" tabindex="0" />
</div>
<div>
  <label for="passwordForInput">Password</label>
  <input type="text" name="passwordForInput" class="form-control" @bind-value="@passwordForInput" tabindex="1" />
</div>
<div>
  <button @onclick="@Submit" class="btn btn-outline-primary" tabindex="2">送信</button>
</div>

<hr />

<div>
  <label for="userIdForShow" class="form-label">UserID</label>
  <input type="text" name="userIdForShow" readonly class="form-control" @bind-value="@userIdForShow" />
</div>
<div>
  <label for="passwordForShow" class="form-label">Password</label>
  <input type="text" name="passwordForShow" readonly class="form-control" @bind-value="@passwordForShow" />
</div>
<div>
  <button @onclick="@Load" class="btn btn-outline-primary" tabindex="3">読込</button>
</div>

<hr />

<button @onclick="@Clear" class="btn btn-outline-primary" tabindex="4">クリア</button>

@code {
  string userIdForInput = string.Empty;
  string passwordForInput = string.Empty;
  string userIdForShow = string.Empty;
  string passwordForShow = string.Empty;

  async void Submit() => await SecureStorageService.SetCurrentUserAsync(new User(userIdForInput, passwordForInput));

  async void Load()
  {
    var user = await SecureStorageService.GetCurrentUserAsync();
    userIdForShow = user.UserId;
    passwordForShow = user.Password;
  }

  void Clear()
  {
    userIdForInput = string.Empty;
    passwordForInput = string.Empty;
    userIdForShow = string.Empty;
    passwordForShow = string.Empty;
    SecureStorageService.DeleteUser();
  }
}
